window.database = {
  
    
    "2-0-network-design-html": {
      "title": "2.0 Network Design",
      "category": "",
      "content": "2.0 Network DesignThe DWeb Camp 2019 mesh network is designed as an experimental network that prioritizes flexibility and modularity over reliability.Hardware ComponentsThe central router of each node is an ESPRESSObin single-board computer (SBC). If you are unfamiliar with SBCs, think your smart phone, but instead of having a screen and a camera it now has gigabit network ports. These relatively low-cost but powerful boards (lots of RAM and CPU cycles) are usually used for tinkering rather than running production networks, which means we have wandered pretty far off from “reliable networking equipment”, in exchange for great flexibility, to perhaps one day play with resource intensive routing protocols or host dockerized peer-to-peer services right on our routers.Another important feature is modularity, which allows us to easily construct different mesh nodes according to the network topology. For example, switching a pair of MikroTik Wireless Wire for an ethernet cable requires no software configuration, neither does switching between different types of Access Points or Network Switches. We also discovered an unanticipated consequence of having modular devices; it allowed us to hold a device and describe its single purpose in a mesh node, allowing new network participants to visualize the different components necessary to form a mesh node and build a mental picture of a network exchanging information over different wireless frequencies across the venue. This ability to teach many aspects of the network allowed us to recruit and form small teams of Network Stewards that go around the site rapidly extending, altering, and repairing the network, while on-boarding new participants in the process.The diagram below illustrates how the router in Node 1 uses two lan ports connect its Local Area Network (LAN) and one wan port to connect a mesh radio to access the Wide Area Network (WAN). In this example, Camp participants would connect their wireless devices (e.g. phones and laptops) to an Access Point attached to lan0 and wired devices (e.g. Raspberry Pi and servers) to a Network Switch attached to lan1. In another node, both lan ports can each be attached to an Access Point in order to cover a large hall, for example, and no software changes would be necessary as explained above.Since we only have one wan port, in cases where we use more than one mesh radio (i.e. not an edge node), we connect a VLAN-tagging switch to the wan port and then the mesh radios to the switch ports. This way, the router sees wan.1, wan.2, …, wan.N network interfaces, for N mesh radios connected, and Babel can route traffic between them based on the dynamic network topology and route metrics. The above diagram shows an example edge node, Node 1, that is connected to a relay node, Node 2, that utilizes a VLAN-tagging switch to connect three mesh radios.We ended up deploying 6 nodes throughout Camp, and then a 7th node as an activity. All our nodes have different components and some of them evolved throughout the days of Camp. You can see a list of hardware that make up these mesh nodes. Participants have no expectation of roaming across different building zones, and they can check their IP address to see exactly which node they are connected to.IP AssignmentsThe network assigns each connected device an IP address from the 10.X.0.0/16 subnet that is unique across Camp, where X corresponds to the building number on the physical map. For example, the Mesh Hall node has IP address 10.8.0.1 and assigns from 10.8.0.0/16 because its building number is 8.The lack of Network Address Translation (NAT) allows for any device to work as a server, having a stable IP address that other devices can reach. This eliminates the need for intermediary nodes with public IP addresses, making it easy for peer-to-peer protocols to bootstrap with anyone during Camp.When a device moves from one building to another, and it decides to associate with another mesh node’s Access Point, it will be assigned a new IP address meanwhile the last two octets will generally be the same as before. If one is running a server, this will change its IP address, so most service-hosting devices are connected via ethernet cable at a fixed building.CreditsThis network is designed with contributions by members of Toronto Mesh, People’s Open, and Althea, and draws from MikroTik radio documentations published by NYC Mesh.",
      "url": "/2.0-network-design.html",
      "href": "/meshnet/2.0-network-design.html"
    }
    ,
  
    
    "2-1-espressobin-router-html": {
      "title": "2.1 ESPRESSObin Router",
      "category": "",
      "content": "2.1 ESPRESSObin RouterThe router is responsible for three things:  Distribute IP addresses to wired and wireless client devices on the LAN  Distribute routes to its LAN across the mesh network using Babel  Route IP packets across the mesh network using BabelIt is the central point of each node where all other devices are connected to.ESPRESSObin SBUD102 V5We will configure the ESPRESSObin board so wan is used to connect point-to-point mesh radios, and lan0 and lan1 are bridged as lan for the local wired and wireless network:    +-ESPRESSOBIN---------+P+-+    |                      O  |    |                      W  |    |                      E  |    |      L     L     W   R  |    |      A     A     A      |    |    +-N-+ +-N-+ +-N-+    |    +----| 1 |-| 0 |-|   |----+         +---+ +---+ +---+      Using your computer, connect via serial interface to the ESPRESSObin’s micro-USB port and run something like minicom on your computer to update the boot script (you probably need to paste a few lines at a time and make sure there are no spaces before and after each line):     env default -a setenv fdt_addr 0x6000000 setenv kernel_addr 0x7000000 setenv loadaddr 0x8000000 setenv initrd_size 0x2000000 setenv initrd_addr 0x1100000 setenv scriptaddr 0x6d00000 setenv initrd_image uInitrd setenv boot_targets 'usb sata mmc1 mmc0' setenv boot_prefixes '/ /boot/' setenv bootcmd_mmc0 'setenv devnum 0; setenv boot_interface mmc; run scan_dev_for_boot;' setenv bootcmd_mmc1 'setenv devnum 1; setenv boot_interface mmc; run scan_dev_for_boot;' setenv bootcmd_sata 'setenv devnum 0; scsi scan; scsi dev 0; setenv boot_interface scsi; run scan_dev_for_boot;' setenv bootcmd_usb 'setenv devnum 0; usb start;setenv boot_interface usb; run scan_dev_for_boot;' setenv bootcmd 'for target in ${boot_targets}; do run bootcmd_${target}; done' setenv scan_dev_for_boot 'for prefix in ${boot_prefixes}; do echo ${prefix};run boot_a_script; done' setenv boot_a_script 'ext4load ${boot_interface} ${devnum}:1 ${scriptaddr} ${prefix}boot.scr;source ${scriptaddr};' saveenv    then power off the board by disconnecting both the power and the mirco-USB port        Using your computer, flash SD card with Armbian for ESPRESSObin, then insert it into the ESPRESSObin with Internet access through one of its ethernet ports, then power on (never connect two ESPRESSObin devices to the same network until after you run this install script, the ethernet interface on all devices have the same MAC address and it will packet storm your network, nobody wants that)        Login as root / 1234 then run espressobin/install and go through the first-run menus.        Figure out what type of node this will be:                            Type          Description                                      edge          Node with only one Point-to-point Mesh Radio                          relay          Node with multiple Point-to-point Mesh Radios and relays traffic for other nodes                          gateway          Node that routes the local network to the Internet                      then run with a TYPE from above and a NODE_ID between 0 to 99:     # wget https://raw.githubusercontent.com/dweb-camp-2019/meshnet/master/prodnet/espressobin/install # chmod +x install # ./install TYPE NODE_ID  The ESPRESSObin V5 has been discontinued and became unavailable weeks before DWeb Camp 2019. The ESPRESSObin V7 can be used in place of the V5.",
      "url": "/2.1-espressobin-router.html",
      "href": "/meshnet/2.1-espressobin-router.html"
    }
    ,
  
    
    "2-2-vlan-managed-switch-html": {
      "title": "2.2 VLAN Managed Switch",
      "category": "",
      "content": "2.2 VLAN Managed SwitchThis device is only necessary for relay and gateway nodes.We configured the ESPRESSObin to have only one wan port. Babel needs to distinguish different network interfaces in order to create the intended network topology and compute route metrics between the different links, then make routing decisions accordingly. So we will make virtual interfaces by tagged each mesh radio with a different VLAN ID, essentially multiplexing differently tagged packets into wan which then seperates them out on wan.1 wan.2 wan.3 and wan.4 on the ESPRESSObin, and what Babel sees are seperate network interfaces as if the ESPRESSObin has 4 wan ports.NETGEAR GS305E Gigabit Managed Switch      Connect to the GS305E default IP and login to the admin interface        Enable Basic 802.1Q VLAN Status then configure the following VLAN ID settings:                            port          1          2          3          4          5                                      VLAN ID          1          2          3          4          all                          Apply the configurations, then wait 30 seconds to ensure the changes are saved        Connect port 5 to the ESPRESSObin wan port, and use the VLAN tagged ports for point-to-point radios or ethernet cables that connect mesh nodes        If this is an Internet Gatway node, connect your Internet backhaul to port 4 (since we have wan.4 configured to be the Internet route for Internet Gateway ESPRESSObins)  ",
      "url": "/2.2-vlan-managed-switch.html",
      "href": "/meshnet/2.2-vlan-managed-switch.html"
    }
    ,
  
    
    "2-3-point-to-point-mesh-radios-html": {
      "title": "2.3 Point-to-Point Mesh Radios",
      "category": "",
      "content": "2.3 Point-to-Point Mesh RadiosDirectional radios that make a point-to-point link are put into bridge mode to serve as a wireless replacement of an ethernet cable. These high gain radios need to be aligned carefully to be pointed at one another within about 20 degrees to get optimal speeds.MikroTik SXTsq 5 ac (5 GHz)      Download the latest release of RouterOS for the SXTsq 5 ac (v6.44.3 (stable) is the version used)        Connect your computer to the ethernet port of the MikroTik device and configure the static IP 192.168.88.100 on the local network interface        Connect to 192.168.88.1 and login to the web interface as admin without password, upload the .npk file and reboot the device, then verify RouterOS is upgraded to the latest        SSH into the device with ssh admin@192.168.88.1        Ensure the device has fresh configurations, run /system reset-configuration if needed        Run sxtsq/sxtsq-ap.rsc        Reboot the device with /system reboot and it will acquire the new IP address 192.168.88.2        Repeat the above steps for the second (client) device, then run sxtsq/sxtsq-client.rsc, and it will acquire the new IP address 192.168.88.3 after reboot  MikroTik Wireless Wire (60 GHz)These are pre-configured devices that operate at 60 GHz to form a gigabit wireless link at distances ~100 m. They send and receive between 700-900 Mbps even when alignment is a little off and have LEDs to indicate link quality. The pair has management IP addresses of 192.168.88.2 and 192.168.88.3, when can be accessed via the ESPRESSObin via SSH as admin user, but this usually isn’t necessary as they should “just work” as if it is an actual ethernet cable.Ethernet CableIf distances allow, you can just use an ethernet cable to link two nodes. Remember the maximum distance for ethernet cables to work reliably is 100 m. Make sure to use reliable cables, as a lot of issues have been due to faulty cables of unknown origin or poorly crimped connectors. These issues are often not picked up by ethernet cable testers.",
      "url": "/2.3-point-to-point-mesh-radios.html",
      "href": "/meshnet/2.3-point-to-point-mesh-radios.html"
    }
    ,
  
    
    "2-4-access-point-radios-html": {
      "title": "2.4 Access Point Radios",
      "category": "",
      "content": "2.4 Access Point RadiosWe use three models of radios depending on whether we need wireless coverage all around the antenna (omnidirectional) or an area within a 120 degree cone (sector). We will configure each radio to provide a 5 GHz-only network with:SSID:     dwebcampPassword: dwebcampThere will be two users: admin with ADMIN_PASSWORD, and me with no password and read-only access to the access point web UI.MikroTik OmniTIK 5 PoE ac (Outdoor Omnidirectional)      Connect your computer to one of the LAN ethernet ports of the MikroTik device and configure the static IP 192.168.88.100 on the local network interface        SSH into the device with ssh admin@192.168.88.1        Ensure the device has fresh configurations, run /system reset-configuration if needed        Run omnitik/omnitik-ap.rsc after replacing the ADMIN_PASSWORD  MikroTik mANTBox 15s (Outdoor Sector)      Connect the MikroTik device to a router with a DHCP server        Connect your computer to the router (not to the access point of the MikroTik device, otherwise configuration scripts will not fully execute whenever a command resets the access point)        Scan for the IP address of the MikroTik device with a tool like nmap or arp-scan        SSH into the device with ssh admin@IP_ADDRESS        Ensure the device has fresh configurations, run /system reset-configuration if needed        Run mant15s/mant15s-ap.rsc after replacing the ADMIN_PASSWORD  MikroTik cAP ac (Indoor Dual-band Omnidirectional)      Connect the MikroTik device to a router with a DHCP server        Connect your computer to the router (not to the access point of the MikroTik device, otherwise configuration scripts will not fully execute whenever a command resets the access point)        Scan for the IP address of the MikroTik device with a tool like nmap or arp-scan        SSH into the device with ssh admin@IP_ADDRESS        Ensure the device has fresh configurations, run /system reset-configuration if needed        Run cap/cap-ap.rsc after replacing the ADMIN_PASSWORD  MikroTik wAP ac 3x3 (Indoor Dual-band Omnidirectional)      Connect the MikroTik device to a router with a DHCP server        Connect your computer directly to the MikroTik device using WiFi at one of its two SSIDs        Scan for the IP address of the MikroTik device with a tool like nmap or arp-scan        SSH into the device with ssh admin@IP_ADDRESS        Run the commands in wap/wap-ap.rsc in stages:          Run the first command after replacing the ADMIN_PASSWORD      Run the next commands up to and including Line 56, this will change the WiFi password and break your WiFi and SSH connection      Reconnect with the wAP using the new password on Line 56      Run nmap again to get the device’s new IP address      SSH into the device again with it’s new IP address ssh admin@IP_ADDRESS      Run the next two blocks one by one, and reconnect as needed if the connection breaks      ",
      "url": "/2.4-access-point-radios.html",
      "href": "/meshnet/2.4-access-point-radios.html"
    }
    ,
  
    
    "2-5-client-poe-switches-html": {
      "title": "2.5 Client PoE Switches",
      "category": "",
      "content": "2.5 Client PoE SwitchesTwo models of Linksys PoE switches are used, SRW208P (8-port) and SRW224P (24-port), with 10/100 ports and two gigabit ports on each. 802.3af PoE splitters of 5V (micro-USB) and 12V (barrel-jack) are used to provide power and 10/100 networking to client devices, such as Raspberry Pis and laptops. They are on the same 10.X.0.0/16 LAN as client devices that are wirelessly connected through Access Points.At Camp, we used many more client switches, most of them loaned by Internet Archive or other networking-savvy participants. The variety of PoE and non-PoE devices behaved similarly without any custom configurations.",
      "url": "/2.5-client-poe-switches.html",
      "href": "/meshnet/2.5-client-poe-switches.html"
    }
    ,
  
    
    "3-0-social-experience-html": {
      "title": "3.0 Social Experience",
      "category": "",
      "content": "3.0 Social ExperienceOne of the most important goals, and experimental component, of the participatory network is the social experience of building a network together. This is captured in one of our design goals:  Allow Camp participants to extend or run locally-hosted services on the networkFrom the beginning, not only did we want many people to participate in building and maintaining of the network, we also hoped people would run local applications on it. Throughout different phases of this project, many people contributed their skills, hardware, art, experience, and other forms of labour and support.Section 3 documents the experience during planning phases and throughout the event.",
      "url": "/3.0-social-experience.html",
      "href": "/meshnet/3.0-social-experience.html"
    }
    ,
  
    
    "3-1-collaborative-planning-html": {
      "title": "3.1 Collaborative Planning",
      "category": "",
      "content": "3.1 Collaborative PlanningThere were two broad categories of collaborations that took place throughout the network planning and deployment:      Virtual collaborations were usually asynchronous over discussions on GitHub Issues, plus a lot of real-time chat sessions on #dweb-camp-2019-mesh:matrix.org and #tomesh:tomesh.net, where many volunteers excited about DWeb Camp contributed their expertise on networking hardware and software. Some of the contributors did not actually attend DWeb Camp, but their contributions were significant, especially during prototyping and design phases        In-person collaborations happened over multiple trips to the venue and became the focus leading up to and during the event, in addition to occasional gatherings at the Internet Archive. Having in-person work sessions proved to be important in engaging new people to take leadership on initiatives and coordinating on-boarding activities  Planning The MeshnetThere were many moving pieces that only became clear weeks ahead of Camp:  Available hardware budget and device availabilities  Attendance and the coverage area of the event  Volunteers’ availability to help in different ways  Availability of Internet accessUntil July, the network existed as a 3-node mesh network running at the Internet Archive.Before July, friends from People’s Open and Althea, along with other volunteers, have popped by the venue to conduct some radio testing, but we have never tested beyond a point-to-point link on site.The software that configures the mesh hardware, running on the Internet Archive demo system, has mostly been developed by Benedict with remote help from Yurko of Toronto Mesh. While the router and radio configurations borrow heavily from Toronto Mesh’s existing work on single-board computers and NYC Mesh documentations, the combination of these components into a modular system, as described in Section 2, makes the overall network design and hence the software quite different from either. So at that time, only Benedict and Yurko knew how this system worked, and the volunteers from People’s Open had an idea because they also use Babel in their network and has familiarity with how it works, so during earlier trips to the venue we were able to more or less stay in sync.The risk in the few weeks leading up to Camp was whether we would discover significant problems when finally starting to deploy production nodes, and if so, do we have enough capacity to resolve the issues. In Section 3.2, we will discuss how the Network Stewards program, that was formally announced around mid-June and consisting primarily of in-person high-bandwidth work sessions, proved to be key in the production network deployment and its continued maintenance.Prototyping ApplicationsWhether the physical network would work in production was one area of concern, but around end of May, less than 2 months from Camp, the builders who intended to deploy their applications had started planning for their projects. Many of the uncertainty around how the applications may interface with this experimental network would need to be answered. These questions generally concerned IP assignment, discovery protocols, DNS, SSL, NTP, and hardware logistics.In addition to answering questions on GitHub, two efforts were undertaken to help application builders get a better idea of the meshnet environment.      We arranged an All Day Hackathon on June 26, about a month ahead of Camp. Builders who live nearby, such as Mark who was building a local communication app based on GUN running on Raspberry Pis, was able to test out the software on the demo network at the Internet Archive.        For people who are not in town, we built the Raspberry Pi-based system that simulates the Camp network, discussed in Section 5.1, so application builders could plug a device into the ethernet port of a Raspberry Pi and pretend they were plugged into the DWeb Camp meshnet.      Some other builders arrived a couple days early to Camp and made their software play nice with the meshnet, sometimes with the help of Network Stewards. In the end things worked out without much struggle :)",
      "url": "/3.1-collaborative-planning.html",
      "href": "/meshnet/3.1-collaborative-planning.html"
    }
    ,
  
    
    "3-2-network-stewards-html": {
      "title": "3.2 Network Stewards",
      "category": "",
      "content": "3.2 Network StewardsThe idea of forming a community of Network Stewards was conceived early on in the project in order to achieve the capacity we need to build, maintain, and teach the mesh network during Camp.The first public announcement was made on June 14 via GitHub, but by that time Benedict already had a group of about 10 volunteers who either had helped in the planning phases or indicated during registration that they would like to be a network volunteer. A few of the volunteers had a technical background in networking; most others had experience in building applications, facilitating workshops, and community organizing, but with little prior experience deploying physical networks.BuildThe build of the network at Camp started in July, with Benedict and Margaret spending July 1-4 at the venue to run some cables and install the first nodes.Since Margaret was the first person to learn how to set up a full node, which up until this point had been designed by Benedict and his remote peers, these couple of days at Camp also inspired how tasks can be shared by a team. This marked the beginning of the collaborative processes that would take place among Network Stewards leading up to and throughout Camp.It was not until the second trip, when Benedict, Seth, lluna, and Robert spent July 7-10 at Camp that the core network nodes were installed. With the experience of partitioning tasks from the previous trip, this second trip was a highly productive time that started with planning on a map, then with each of the four Network Stewards putting together their custom node for the location they chose on the map.Putting together this first node together based on documentation, and struggling through technical hurdles together, made everyone generally familiar with all aspects of the system and knew who became the experts of specific domains. For example, everyone learned the available radios and how to test link bandwidth, but lluna became most familiar with preparing the ESPRESSObin routers (preparing SD cards for the different node configurations, rescuing a dead board with serial console, and keeping inventory of the different boards going around).In a few short days, this early group of Network Stewards developed the team chemistry to parallelize tasks and the capacity to operate independently to screen and tackle network problems. We installed five of the six nodes during this period, leaving only 18 Camp Lions Mane offline. Ben E. and Mai also popped by one of the days to wire up the indoor space of 8 Mesh Hall, the main hacking and demo area with high speed wired networking for servers and other devices.When the public Build Days, July 15-17, came along, much of the core network was already in place. The deployment work continued with the help of new Network Stewards, such as Luandro, Merlin, and Riley, who arrived to California just days before. Camp Lions Mane was quickly brought online and the Internet backhaul that just became available days ahead of Camp was plugged into the 10.5.0.1 mesh node at 5 Tea Lounge.Tasks at hand for the Network Stewards also diversified. Kyle, Alex, and Riley started configuring the central directory, 10.8.8.8, which hosted ip-dir and media uploader. Meanwhile lluna, Jenny, Marcela, Taeyoon, Hiure, Lunadro, and Benedict started discussing activities on the mesh and how to on-board new Network Stewards. Most of these collaborations lasted beyond the Build Days and continued throughout Camp, adapting to the changing needs.MaintainAfter the Build Days, the community of Network Stewards has grown to more than ten people, and about half of us took up specific domains of the many parallel initiatives. For example, we knew Seth, Luandro, and Ben E. were on top of keeping the overall network healthy, while a working group consisting of lluna, Jenny, Marcela, and Taeyoon independently built a network model for teaching the network.Kyle, Alex, and Riley helped application builders deploy their software and Raspberry Pis on the local network, keeping a collaborative IP address directory on 10.8.8.8. The landing page of that Raspberry Pi evolved over time based on feedback of Camp participants. It was once a static page linking to various resources, and at some point it became a collaborative edit pad.There were a couple interesting network incidences, some of them documented in Section 3.3.TeachThe Network Steward community was critical to our goal of a participatory network. We have taken steps to make the network infrastructure highly visible and communicated its development progress leading up to Camp, but many people arriving to Camp would come unaware of this experimental mesh network since event networks are generally provided as an opaque service managed by a closed group of network administrators. We would need many people with enough familiarity with the network to explain what it is, its design and function, the ways that one can tinker with it, and its relation to the culture of community networking.Organizing tours of the physical network infrastructure allowed for a visual experience, and having the network model aided the mental mapping of a single mesh link to the overall network topology. We also developed small cues such as linking IP addresses with the physical building numbers and the exercise of listing one’s IP address on a phone or laptop, to relate one’s digital experience to the physical infrastructure. We employed various network diagnostic programs that anyone can run on their phone or laptop, to help understand concepts such as bandwidth and routing when discussed independently from the Internet.Diagrams and helpful commands were printed on a sheet by Ace ahead of Camp, intended for Network Stewards as reference, and anyone who took a tour was invited to become a Network Steward themselves and wear a pin to indicate to others that they could help explain the Camp network. This is a mechanism that would hopefully scale the Network Steward community nicely with the size of the event. You can find the graphic assets we used in Section 5.3.In addition to running tours throughout the event, we also designed specific activities for those excited to dive deep into setting up their own mesh network.Network Stewards facilitated the Mesh Playground activity, where we explained components that make up a DWeb Camp 2019 node, constructed one together, and connected this new node to extend the Camp network as the seventh node. Then the group played around with network diagnostics and ethernet cable crimping competitions. A parallel initiative, the Geek Free Meshnet led by Nico, Hiure, Luandro, and other community leaders of APC demonstrated how to quickly set up a mesh network with the LibreRouter, informed by many years of rural networking experience and designed for plug-and-play deployment that requires no technical expertise.The Network Stewards program is perhaps the most important part of the participatory network. The network lasted only the couple days of Camp, but the shared experience around network building advanced individual technical capacities and trust among peers. Our learning from this program will be discussed in the retrospective along with reflections about other components of the overall social experience.",
      "url": "/3.2-network-stewards.html",
      "href": "/meshnet/3.2-network-stewards.html"
    }
    ,
  
    
    "3-3-incident-response-html": {
      "title": "3.3 Incident Response",
      "category": "",
      "content": "3.3 Incident ResponseAlthough we discussed many ways to monitor the health of the network, none of those were implemented due to capacity constraints. Our entire monitoring was basically bmon and noping running on the 10.8.0.1 node at Mesh Hall displayed on a TV.Here you can see terrible ping to 10.18.0.1, which we can tell from the building map that the path to 18 Camp Lions Mane needs some servicing.Upon discovering these network issues, Network Stewards can SSH access the nodes and run different diagnostics such as iperf3 to start debugging the problem.We’ve encountered temporary outages from a stopped truck blocking an antenna, switch failure, access point saturation, and other small incidents. In all these cases, Network Stewards that happened to notice the problem had them resolved usually rather quickly and often enlisting the help of other curious campers.Throughout the event, the network evolved organically. As people arrived, one of the nodes were saturated, and Seth added an extra access point radio in the night to handle the load. He also went with a group to swap out the Camp Lions Mane mesh link from a pair of 5 GHz SXTs to 60 GHz Wireless Wires. The registration desk was placed in an unanticipated location and the coverage was poor, so some Network Stewards convinced one of the kids from his VR headset to help rearrange the sector antennas on the 19 Powerhouse solar node. It is important to emphasize that there was little central coordination of these initiatives to steward the network, and news of the network evolution mostly spread by word of mouth.Now we will discuss a couple interesting incidents that the Network Stewards encountered.Gigabit Link Speed Drops To 100MHere is the first report of the issue:  These are wireless wire links normally talking at 800 Mbps, passing thru Netgear gigabit managed switch for VLAN tagging, and into espressobin. Some of these links fall to 94 Mbps (100M) speeds all of a sudden and stay there. Tested with different cat5e cables. Suspect this is related to the Netgear switch. Rebooting it or entire node doesn’t help. Same links have recorded 800+ Mbps.Early debug confirmed that the radios were communicating at full speed, but eventually the ethernet interface dropped to 100M, and this happened in the absence of a VLAN tagging switch in between. The primary suspicion was excessive heating of the ESPRESSObin internal switch, because one end of the particular link experiencing this issue was exposed to direct sunlight, and Benedict had observed that link to operate at full speed during one night. So before returning to Camp, Luandro repurposed some unused computer fans we found at Internet Archive for 5V (quiet) and 12V (powerful) cooling.Upon arriving at Camp, one group of Network Stewards went off to install our hacked fans onto nodes that were running under direct sunlight. This unfortunately did not fix the problem. Ben E from People’s Open made it his personal mission to find out what was going on, and eventually narrowed it down to a poorly crimped ethernet cable. Of course :)We have unfortunately ruled out the possibility of a faulty ethernet cable before because every cable had been checked with the ethernet tester, and we have swapped different cables for this node during early debug. We have learned the symptoms of devices connected with partly-functioning ethernet cables, and to not fully trust the cable testers.In the end, this critical link between 2 Camp Enoki and 11 Medical, which we relied on to connect upper camp to the central areas, was returned to full gigabit speed.Rogue DHCP Server8 Mesh Hall was the main area where project demos and other network-heavy activities were gathered. At one point, many people started losing Internet access from there even though their devices were connected to the access point. We, a group of Network Stewards, discovered that their devices were assigned an IP address that we did not expect, but… by who?We discovered that these devices were indeed connected to our access point, not one that was broadcasting the same SSID and pretending to be the DWeb Camp network. This means we had a device connected to our network acting as a second DHCP server, and they were able to hand out IP addresses in their range faster than our mesh node could. We identified the device’s MAC address and started speculating on its intent, concluding that it was potentially malicious because it was also running a DNS server, so it could redirect traffic to connected clients. We believed it was a wirelessly connected Raspberry Pi based on our information gathering, so it could be connected to a battery in a backpack and out of sight.We tried to blacklist the MAC from the MikroTik radios, meanwhile leaving a message on the board asking people to set a static IP address on their device to avoid DHCP altogether. After spending many hours in the night, we thought we got the blacklist feature to work, but only to discover the device was connected again in the morning. This became a morning conversation for the people involved in the detective work, and when Dietrich heard about the incident, he thought of a suspicious Raspberry Pi.It turned out there was a Raspberry Pi that had a Mozilla IoT WebThings Gateway image installed, and was passed off to Why for reconfiguring to connect to the wireless network, without realizing it was running a DHCP server 😭Upon investigating, this IoT gateway not only had a DHCP server running on the wireless interface, but it was running with dhcp-authoritative mode, which effectively overrides existing DHCP leases for clients! The device also disabled SSH on all interfaces and had no web UI, making it look especially like an intentionally malicious node 😅 We eventually discussed this interesting incident with Mozilla IoT and you can see the thread here.The takeaway is, we are glad we ran a routed network rather than a switch network, because otherwise this Raspberry Pi would have affected the entire network, not just the ones connected to the 10.8.0.1 node at Mesh Hall. We also need to figure out how to ban devices for the future.Standing IssuesSD card corruption on poweroff without shutdown is a common problem with single-board computers. Using a ramdisk system and minimizing SD card writes would help, but for the things we intend to do on the ESPRESSObin routers, we may need more RAM than available.The ESPRESSObin have had other SD card problems because of its design. The spring-loaded SD card slot often gets accidentally pressed on when plugging cables, leaving the SD card ejected in the slot. Sometimes Network Stewards would swap a cable, accidentally popping the SD card of a running node, and the node becomes partly functional and failing during seemingly random operations, because the node still responds to pings and can perform basic operations as the OS is running in memory even while the SD card is ejected. However, when trying to perform an operation that requires loading data from the SD card that is not cached in RAM, we get strange failures.Mesh links formed by wireless wires iperf3 asymmetric speeds still remains a mystery.",
      "url": "/3.3-incident-response.html",
      "href": "/meshnet/3.3-incident-response.html"
    }
    ,
  
    
    "3-4-local-services-html": {
      "title": "3.4 Local Services",
      "category": "",
      "content": "3.4 Local ServicesThe builders of DWeb Camp 2019 brought a number of local services to the network. Most of these were listed on the 10.8.8.8 Raspberry Pi plugged in at Mesh Hall, using a simple directory listing that Alex built days ahead of Camp.ip-dir is a simple web app that allows builders to add an IP address, name, and description to a list. Everyone attending Camp, no matter which mesh node they were connected to, may navigate to 10.8.8.8 to view this list, and click one of IP addresses to access the service.Kyle put up a full Geocities archive on IPFS and Bryan made available a giant repository of research papers on fatcat! Mark, who tested his GUN app at the Internet Archive hackathon, installed Raspberry Pi bootstrap nodes at a couple mesh nodes to let people do scheduling in real-time. Matthew brought a Raspberry Pi hosting a local Matrix homeserver.Dinesh brought an audio-recording Raspberry Pi loaded with Namma School Radio for us to record messages to the community.There were some projects on the network that were either not added to the directory, or added after the photo was taken, or functioned completely peer-to-peer so it did not need any particular IP to be listed in a central directory for its function. For example, Scuttlebooth allowed people to take snapshots, posting them onto the Scuttlebutt peer-to-peer social network that many people were running on their device during Camp.PLAN Systems had a demo running at Mesh Hall, while Riley was hacking together a media uploader that allowed people to upload photos onto a hard drive at Mesh Hall, and LibreRouter together with a couple DWeb Camp Global Fellows from APC ran a parallel network altogether.You can find out more about these projects, and many others, on DWebCamp.org Projects and GitHub.",
      "url": "/3.4-local-services.html",
      "href": "/meshnet/3.4-local-services.html"
    }
    ,
  
    
    "3-5-retrospective-html": {
      "title": "3.5 Retrospective",
      "category": "",
      "content": "3.5 RetrospectiveThis documentation is drafted by Benedict, the Network Coordinator of DWeb Camp 2019, and may be biased towards his perspectives and subjective curation. However, everything on this website is open source and hosted as a static website from GitHub, and everyone involved in this collective experience is invited to add their feedback and improve the content.In the retrospective section, let us begin by sharing some documentation and post-event reflections by other Network Stewards. The first piece is a video documentation by Hiure, who traveled to Camp with Marcela and their baby Amina, both builders and organizers in their local community network in Brazil.You can see feedback from other APC members on the communitynetworks.group forum. Many people also shared their DWeb Camp 2019 reflections on Scuttlebutt, and one of the posts by Taeyoon included an insightful prompt that felt especially relevant to discuss here:  How to avoid centering of decentralization? How to decenter away from Silicon Valley, geographically, economically and culturally? What are the limits of decentralization? Perhaps decentralization is not the end goal, it may be the process? Then, what is the intention of our personal and collective practice? How to distribute and share the power to communicate, learn and build community?This is a prompt to all of us as Network Stewards, as organizers and participants of DWeb Camp 2019, as builders and proponents of community networks and the decentralized web. After the significant investment that enabled this opportunity for technical tinkering and exchange, and with the relationships and trust we built among the community, we must ask ourselves “what is the intention” and what did we learn about “how to distribute and share the power to communicate, learn and build community?”The participatory network demonstrated a different way for humans to relate to digital technologies, where we emphasized the participation over consumption of technologies. We were learning together to build technologies to serve our needs, and in the process reinforced human-to-human trust through our collective struggles. Many of us stream videos on our phones and computers everyday, but the first video streamed over our local network felt like a monumental achievement. We imagined all the software and hardware we had put in place, as the bits moved to IP addresses via routed packets, through ESPRESSObins and wireless radios, reassembled by our computer to display this content with our familiar video playback controls. We were able to explain and ask questions about every step of the process and the physical infrastructure that enabled what we were experiencing on the screen.In the early planning phases, we looked to events like Chaos Communication Congress (CCC) with a long history and admired their sophisticated networking operations, and wondered how the teams developed their collective capacity over many years. We hope our community of Network Stewards from DWeb Camp 2019 can be the seed that will continue this culture of network learning and building, where we can gather at events like DWeb Camp to tinker experimental networks, and bring these experiences to our local community projects or inspire new ones.Through the Network Stewards program, we learned that when enthusiastic people are provided with the basic background and a support system, and entrusted to take ownership, we can enable the spreading knowledge to form a resilient collective that can lead parallel initiatives and tackle challenges that arise in a changing and complex system. Of course there remains many unresolved issues in the network operations of 2019. We did not build sophisticated monitoring and metrics as CCC does, and there was no local DNS or NTP on site, leaving us dependent on Internet infrastructure. The more centralized early planning phase led to many subjective design choices by the Network Coordinator, and most other Network Stewards had little opportunity to the network’s overall design. Now with a high trust community of Network Stewards as foundation, we are in a better position to collectively tackle these technical and social challenges. Every issue, technical or otherwise, is an opportunity for our DWeb Camp Community Network to “communicate, learn and build community”.",
      "url": "/3.5-retrospective.html",
      "href": "/meshnet/3.5-retrospective.html"
    }
    ,
  
    
    "4-0-planning-notes-html": {
      "title": "4.0 Planning Notes",
      "category": "",
      "content": "4.0 Planning NotesThis section contains preliminary plans for the network design, when all the information we had was a satellite image of the potential venue for DWeb Camp 2019. Many things about the network has changed since then as more information becomes available, such as the event areas, existing structures, number of participants, power availability, device availability, financial budgets, and results of technical discussions and experimentations. This section presents some of these early planning summaries to give an idea of our network during its planning stages.HardwareThe diagram above is the area map, with preliminary positions of mesh nodes that together form the local mesh network.Each node has a 100 m radius circle around it, representing the region where client devices are expected to form a good connection with the node’s access point.There is a larger 150 m radius circle around where devices may be able to connect. The green dotted lines represent point-to-point links between nodes that together form the local mesh network.Each node is an aggregate of multiple pieces of equipment, which may include:  Radio for directional link  Radio for access point  Network switch, router, and application server  Power equipment, mounts, and cablesSome nodes will have interfaces that allow other devices to be plugged in to offer locally-hosted services on the network. One or more nodes will also serve as the Internet gateway for this local network.Radio for directional linkEach green dotted line represents a directional link formed by a pair of MikroTik SXTsq 5 ac, used in NYC Mesh, supporting link speeds at 800+ Mbps.These devices will run stock firmware.Where possible, we can also link two nodes with a long ethernet cable.One alternative option is the 60 GHz MikroTik Wireless Wire or MikroTik Wireless Wire Dish, but we will start with the SXTsq 5 ac devices at lower costs.Radio for access pointOmnidirectional access points are what client devices will connect to, we will use a MikroTik OmniTIK 5 PoE ac, used in NYC Mesh, as the standard device to connect 50+ clients at a time and deliver 800+ Mbps aggregate speeds.These devices will run stock firmware.An alternative device we can use as access point is the MikroTik mANTBox 15s sector, in areas where only one side of the mount point needs service.Network switch, router, and application serverThe SolidRun ClearFog Pro will be used as gigabit network switch and router.It has 7 gigabit ports, used to connect with the directional and access point radios, Internet gateways, as well as devices offering local services to the network (e.g. Raspberry Pi running a Scuttlebutt Pub Server or GUN peer, or devices running Dat and IPFS to provide the network with distributed storage capacity).In the case that more ports are needed, Internet Archive has Ubiquiti ToughSwitch and other 48-port switches to provide.The ClearFog Pro has a 1.6 GHz ARM processor and 1 GB RAM, so we can run some applications directly on the board that are traditionally unable to run on routers.We also hope to connect LibreRouter devices to the network.It is a 802.11n device and does not have the same application processing power, but it includes two 5 GHz directional radios and a 2.4 GHz access point, and it is an all-in-one and open-source device perfect for the environment we are working with.Power equipment, mounts, and cablesSome areas may not have a source of power.These areas will have to be identified when we survey the site, then we can plan for alternatives.If no high point is available, we may have to install 5-6 m tall poles to mount the wireless equipment.We will also bring large spools of ethernet cables, and tools to make them so everyone can participate in building from basic components.PrototypeWe will create a prototype setup over April and May to validate the devices we chose, and try running various mesh routing software on them.Equipment list            Device      Quantity                  MikroTik SXTsq 5 ac      2              MikroTik OmniTIK 5 PoE ac      1              MikroTik mANTBox 15s      1              SolidRun ClearFog Pro      2              LibreRouter      3              Ubiquiti ToughSwitch      available              Raspberry Pi 3B+      available              Orange Pi Zero      available      Routing protocolWe will start with Althea’s flavour of Babel (with WireGuard).There are other mesh protocols such as batman-adv and BMX6 that may also be tested.Other more experimental protocols such as cjdns and Yggdrasil may be run in parallel to or in parts of the network.",
      "url": "/4.0-planning-notes.html",
      "href": "/meshnet/4.0-planning-notes.html"
    }
    ,
  
    
    "4-1-client-device-roaming-html": {
      "title": "4.1 Client Device Roaming",
      "category": "",
      "content": "4.1 Client Device RoamingSummary  Roaming – client device keeps the same IP across the mesh and in-flight packets get re-routed as the device moves from one access point (AP) to another  Symmetric path mode &gt; asymmetric path mode          Routers don’t like when forward and return paths are different      Use symmetric mode to avoid problems        Roaming on Layer 3 requires an underlying Layer 2 (mesh) network because routers need to share information over Layer 2  babel          Layer 3      Unless the client device also runs Babel, trying to make it roam would be misguided (a lot of work for very broken results)        batman-adv          Layer 2      Project has put a lot of work into roaming support for client devices without batman-adv installed      Should be the mesh protocol to use for roaming        LibreMesh uses both batman-adv (Layer 2) and bmx6 (Layer 3)          We think devices can only roam across batman-adv regions, but not across bmx6 boundaries      Confirm with LibreMesh        There are protocols that try to address these problems, but they are experimental  Why bother roaming?          HLS video stream would probably play smoothly across AP boundaries      RTMP and SIP would have problems      Large file downloads would break across AP boundaries      Roaming experience depends on client device handover as well      Chat logs from matrix/#software:tomesh.netFeb 19, 201914:19 &lt; benhylau[m]&gt; Do you know if Babel can handle roaming? I found a really old thread with juul (people's open) on it. Maybe ttk2 knows about roaming on Babel networks?14:23 &lt; DarkDrgn2k[m]&gt; only Layer 2 can roam14:23 &lt; DarkDrgn2k[m]&gt; cause its not even a ACCESS POINT thing14:23 &lt; DarkDrgn2k[m]&gt; its a CLIENT thing14:24 &lt; DarkDrgn2k[m]&gt; ttk2:  if im not mistaken Babel is layer 3 so WIFI roaming would not work14:26 &lt; DarkDrgn2k[m]&gt; i tried running openvpn across cjdns hoping to create a layer 2 vpn tunnel but TUN devices didnt want to bridge14:27 &lt; DarkDrgn2k[m]&gt; for many applications roaming wont be an issue either. only things that need a solid connections all the time14:29 &lt; DarkDrgn2k[m]&gt; i guess you could create a layer 2 vpn running on top of the cjdns tunnle but that tunnle inside  a tunnel inside a tunnel :P14:30 &lt; DarkDrgn2k[m]&gt; but thats why libremesh rusn to mesh networks14:30 &lt; DarkDrgn2k[m]&gt; one for local meshing the other for outside meshing14:31 &lt; DarkDrgn2k[m]&gt; ive just never been clear when its local when its outside and how it decides14:31 &lt; DarkDrgn2k[m]&gt; &gt; https://github.com/tomeshnet/prototype-cjdns-pi/issues/27814:31 &lt; DarkDrgn2k[m]&gt; HeavyMetal  can you see if that patch fixes things for you?14:37 &lt; benhylau[m]&gt; &lt;DarkDrgn2k[m] \"for many applications roaming wo\"&gt; Right, I also wonder what is the value of roaming. I imagine streaming rtmp would break, but if you are streaming hls I think it can cross WiFi AP boundaries without roaming?14:38 &lt; makeworld&gt; Roaming can happen if the networks have the same name, on android at least14:38 &lt; DarkDrgn2k[m]&gt; &lt;makeworld \"Roaming can happen if the networ\"&gt; That is a requirement but there is also Network considerations14:39 &lt; benhylau[m]&gt; &lt;makeworld \"Roaming can happen if the networ\"&gt; For example, if you go to two APs and they assign you s different IP, it will break your session14:39 &lt; DarkDrgn2k[m]&gt; &lt;benhylau[m] \"Right, I also wonder what is the\"&gt; Rate hls is stateless rtmp would be going to the wrong IP address14:39 &lt; DarkDrgn2k[m]&gt; Same issue with SIP14:39 &lt; makeworld&gt; &lt;benhylau[m] \"For example, if you go to two AP\"&gt; Ah I see yeah14:40 &lt; makeworld&gt; Running mesh routers on your device is supposed to fix this14:40 &lt; makeworld&gt; But yeah14:40 &lt; ttk2[m]&gt; benhylau:  DarkDrgn2k  yes bablel roaming is not very good, use Batman-adv for wifi roaming. 14:40 &lt; benhylau[m]&gt; Roaming has the APs talking among themselves to forward traffic around, keep client IPs, etc14:40 &lt; ttk2[m]&gt; for devices running babel it's ok ish, for dumb wifi devices that aren't mesh aware it's not going to really work at all. 14:40 &lt; DarkDrgn2k[m]&gt; &lt;ttk2[m] \"benhylau:  DarkDrgn2k  yes bable\"&gt; Not very good or non-existent14:40 &lt; ttk2[m]&gt; batman-adv has put a lot more work into this. 14:41 &lt; ttk2[m]&gt; DarkDrgn2k:  well there's some nuance there, there's client roaming and then device running the mesh software roaming 14:41 &lt; DarkDrgn2k[m]&gt; &lt;ttk2[m] \"batman-adv has put a lot more wo\"&gt; babel is notayer 214:41 &lt; ttk2[m]&gt; batman-adv put a lot of effort into roaming for dumb wifi clients and it shows, it's seamlessy when setup properly. 14:42 &lt; ttk2[m]&gt; babel roaming for example works if you're moving slowly enough or if you don't care about latency spikes 14:42 &lt; benhylau[m]&gt; I think it's not non-existent bc I see it discussed on threads, but the terminology isn't ones I am familiar, and support what ttk2 says :D14:42 &lt; ttk2[m]&gt; I mean it's not like babel just stops working while you you walk around, it tires 14:42 &lt; DarkDrgn2k[m]&gt; ttk2: im not talking about babel running on the end device14:42 &lt; DarkDrgn2k[m]&gt; im talking about Access poitn connected to a babel network14:42 &lt; DarkDrgn2k[m]&gt; so the device does not run babel14:42 &lt; ttk2[m]&gt; it's just not proactive about routing in flight traffic to the new destination, so you see starts and stutters. 14:42 &lt; DarkDrgn2k[m]&gt; so when you hope from Router A to Router B you woul dnot have the same ip address right?14:43 &lt; ttk2[m]&gt; access points are worse, becuase more latency, once again doable, but onlyf or like video streaming or downloads, anything real time will suffer too much to be usable. 14:43 &lt; ttk2[m]&gt; I'm assuming you setup some non-babl structure to ensure they always get the same ip14:43 &lt; DarkDrgn2k[m]&gt; ok ... bebel is NOT layer 2 right?14:43 &lt; ttk2[m]&gt; if you don't yes no roaming. But babel doesn't take it upon itself to track that stuff, is it a missing feature or out of scope? who decides?14:44 &lt; ttk2[m]&gt; yes babel is not layer 2, but it's not like you can't roam on layer 3, you just make your tcp connections unhappy 14:44 &lt; DarkDrgn2k[m]&gt; no you cannot14:44 &lt; DarkDrgn2k[m]&gt; wifi roaming is a CLIENT feature not a ACCESS POINT one.14:44 &lt; ttk2[m]&gt; I think we have different definitions of roaming. 14:44 &lt; benhylau[m]&gt; We should define roaming as being able to re-route in-flight traffic right?14:44 &lt; DarkDrgn2k[m]&gt; access point just needs to be on the SAME network so you can have the SAME ip14:45 &lt; DarkDrgn2k[m]&gt; im specificaly talkinga bout the user expriance. so WIFI roaming14:45 &lt; DarkDrgn2k[m]&gt; as far as i know only batman-adv can acomplish this14:45 &lt; DarkDrgn2k[m]&gt; becasue with any other routing protocol you end up with differn tip address which break both TCP and UDP connections and they are required to be re-established14:46 &lt; ttk2[m]&gt; and I'm talking about theory, in theory you could get pretty close to what batman does, in reality batman is a complete package and constructing an eqivalent with babel would be quite a lot of effort for an inferior result. 14:46 &lt; ttk2[m]&gt; I mean there's no reason you can't have babel hand out a dhcp server and there's one global dhcp server for the whole babel network. 14:46 &lt; ttk2[m]&gt; and thus all the nodes and clietns keep their ip's 14:47 &lt; DarkDrgn2k[m]&gt; but that would make it a layer 2 protocl not layer 314:47 &lt; DarkDrgn2k[m]&gt; dhcp needs broadcasts to work14:47 &lt; ttk2[m]&gt; to autoconfigure, it's not like you can't contact a remote dhcp server 14:47 &lt; DarkDrgn2k[m]&gt; well sorry thats not the probem14:47 &lt; DarkDrgn2k[m]&gt; problem is bable would not be able to hand out ips to non bable devices14:47 &lt; DarkDrgn2k[m]&gt; that woul dhave to be a seperate network14:48 &lt; ttk2[m]&gt; although that only really works with ipv6 due to addressing issues 14:48 &lt; ttk2[m]&gt; seperate program, not really network, babel just doesn't take it upon itself to do anything but setup routing tables. 14:48 &lt; DarkDrgn2k[m]&gt; you could not (for example) brdige babel with an access point14:48 &lt; ttk2[m]&gt; there's a lot of nuance here, but if you want client roaming today go batman-adv everything else sucks so bad it's not even worth talking about. 14:49 &lt; DarkDrgn2k[m]&gt; but im talkinga bout client roaming without having the protocol installed on the device14:49 &lt; ttk2[m]&gt; why not? I mean it might not work out of the box, but you can get anything to work if you try hard enough, this is an argument about the distribution of responsibilities14:49 &lt; DarkDrgn2k[m]&gt; ttk2: does babel create an interface?14:50 &lt; ttk2[m]&gt; batman-adv takes more responsibility for making things work, babel is like an old fashioned unix tool it does one thing does it well and doesn't do jack shit outside of that. 14:50 &lt; benhylau[m]&gt; This thread https://alioth-lists.debian.net/pipermail/babel-users/2015-August/002105.html14:50 &lt; ttk2[m]&gt; it's like saying grep is useless because it doesn't make files containing your results automatically 14:50 &lt; DarkDrgn2k[m]&gt; ok two roaming definitions we may be getting confused14:50 &lt; ttk2[m]&gt; it's a difference in design philosophy. 14:50 &lt; DarkDrgn2k[m]&gt;  - BABEL client roming - meaning a node running babled position in the network changes, so routing tables need to be adjusted14:51 &lt; DarkDrgn2k[m]&gt; - WIFI client roaming - when multiple wifi access points are on the same layer 2 network allowing your device to hop one with a better signal strength and retain your identity on the lan14:52 &lt; DarkDrgn2k[m]&gt; in home networks this is not a problem because the home network is not routed, there fore on the same LAN14:52 &lt; DarkDrgn2k[m]&gt; in mesh you must pass the signal over the MESH  so you loose the LAN support14:52 &lt; DarkDrgn2k[m]&gt; Client---AP--BABLE ROUTER------BABELROUTER---AP----CLEINT14:52 &lt; DarkDrgn2k[m]&gt; can both clients be on the same LAN14:53 &lt; ttk2[m]&gt; * batman-adv by virtue of being layer 2 can hide a lot of the internals of keeping identities and roaming 14:53 &lt; ttk2[m]&gt; * babel being layer 3 can't hide them, but there's no reason you can't run a series of carefully configure daemons that assign the same lan id to the client as they roam and have it work mostly the same, is it stupid when batman-adv exists? Sure, is it possible? Yes.14:54 &lt; DarkDrgn2k[m]&gt; ttk2:  but now you have to find a way to route those ips to the right access point14:54 &lt; DarkDrgn2k[m]&gt; so14:54 &lt; DarkDrgn2k[m]&gt; q1) can bable assign clients ip addresses in its own network14:54 &lt; ttk2[m]&gt; babel does not assign ip's but you can run another daemon that does on top of it14:54 &lt; DarkDrgn2k[m]&gt; ok let me rephrase14:54 &lt; DarkDrgn2k[m]&gt; can BABLE route non-babel ip addresses14:55 &lt; ttk2[m]&gt; that's all babel does14:55 &lt; ttk2[m]&gt; no such thing as a babel ip address14:55 &lt; DarkDrgn2k[m]&gt; q2 - does bable create an interface on your router14:55 &lt; ttk2[m]&gt; it just looks at the routing table on the machine and propogages that to the rest of the babel network, a system route is a babel route, a babel route is a system route, it's very closely tied to the kernel routing table. 14:56 &lt; DarkDrgn2k[m]&gt; so if i traceroute trhough babble i will see all the hops it goes through?14:57 &lt; DarkDrgn2k[m]&gt; or will it be 1 hop14:57 &lt; ttk2[m]&gt; no babel does not create an interface, but you could have each babel node run a dhcp node that's slaved to a master dhcp node, then a client shows up, is assigned the same ip by the local dhcp which consults the master and then finally babel propogates a route to that client 14:57 &lt; ttk2[m]&gt; yes you will see the hops. 14:57 &lt; ttk2[m]&gt; you would have to modify the dhcp server to be very aggressive and add /32 routes rather than a prefix but eh you could make it work. 14:57 &lt; ttk2[m]&gt; it's just not somthing anyone actually wants to do. 14:57 &lt; DarkDrgn2k[m]&gt; each hop is a seperate lan..14:58 &lt; DarkDrgn2k[m]&gt; so unless your proxying arp on EACH node your sol for wifi roamning 😓14:58 &lt; ttk2[m]&gt; just because it's inadvisable doesn't mean it's impossible! 14:58 &lt; DarkDrgn2k[m]&gt; because two babel clients cant advertise the same subnet then14:58 &lt; DarkDrgn2k[m]&gt; ehhhh.. i mean i GUESS you could od that.. /3214:58 &lt; ttk2[m]&gt; I'm not saying this is a good idea14:58 &lt; ttk2[m]&gt; I'm mostly being contrarian about system design. 14:59 &lt; DarkDrgn2k[m]&gt; i mean you could mary an ip address to a mac and any time the access point sees the mac address arrive it would assign it its ip addres and push the route through the network14:59 &lt; DarkDrgn2k[m]&gt; but from what your saying, it wouldnt be any faster then just getting a new ip address thats already announced.14:59 &lt; ttk2[m]&gt; it would mostly be to keep tcp connections from flipping out 14:59 &lt; ttk2[m]&gt; most people don't have multipath tcp enabled 14:59 &lt; ttk2[m]&gt; maybe quic will get that. 15:00 &lt; DarkDrgn2k[m]&gt; thast such a dirty solution:P15:00 &lt; ttk2[m]&gt; https://blog.cloudflare.com/the-road-to-quic/15:00 &lt; DarkDrgn2k[m]&gt; but your right in theory it MAY work15:00 &lt; ttk2[m]&gt; I mean that's why quic exists, because building giant layer 2's for roaming isn't doable so you need a good way to roam on layer 3 15:01 &lt; DarkDrgn2k[m]&gt; i think i need to take a shower... reanouncing /32 made me feel dirty!15:02 &lt; DarkDrgn2k[m]&gt; ttk2:  you never astound my by the cockamany ideas you have. still waiting for the Anti-Internet to start up :P UBER drivers with harddrives in their trunk moving data around the city!15:03 &lt; ttk2[m]&gt; DarkDrgn2k:  in order to have many good ideas you must first have an order of magnitude more bad ones. 15:03 &lt; DarkDrgn2k[m]&gt; ohh im full of bad ideas :) dont you worry15:04 &lt; benhylau[m]&gt; My understanding is this is what happens already, in roamed networks that support symmetric roaming (no multipaths bc yes clients flip out), that a master DHCP server will assign all the IPs, except that information is shared across a layer 2 network. So the only change here in this theoretical layer 3 roamed mesh is that some magical protocol does that sharing of information on layer 3 instead15:04 -!- yangm97 [yangm97mat@gateway/shell/matrix.org/x-bqtwzdfyibsxlksk] has joined #tomesh-software15:05 &lt; DarkDrgn2k[m]&gt; basically what ttk2  proposed is basically changing ip routes of a single ip address  to accomodate that non babel entry from moving around the network.15:06 &lt; DarkDrgn2k[m]&gt; but you think the intenet has big routing tables when yoou annouce /24  imagine annoucing that in /3215:06 &lt; DarkDrgn2k[m]&gt; i wonder if you would have more management traffic the actual traffic on the mesh :P15:07 &lt; ttk2[m]&gt; I think there's an experimental patch out there for route aggregation 15:07 &lt; ttk2[m]&gt; but yes it's not a good idea 15:07 &lt; benhylau[m]&gt; &lt;DarkDrgn2k[m] \"basically what ttk2  proposed is\"&gt; Does that mean the client IP will change? Just that the route will change accordingly?15:08 &lt; DarkDrgn2k[m]&gt; well the idea is not to change the client ip15:08 &lt; DarkDrgn2k[m]&gt; so teh network would need to figure out where the client is and make sure traffic gets to him/her15:08 &lt; DarkDrgn2k[m]&gt; which also means a dealy of some sort to propegate the new route each time it roams15:08 &lt; benhylau[m]&gt; I still don't understand how this is different from layer 2 roam, except ARP is now happening on some layer 3 sharing mechanism15:09 &lt; ttk2[m]&gt; it's not 15:09 &lt; ttk2[m]&gt; it's just worse 15:09 &lt; DarkDrgn2k[m]&gt; arp isnt happening on layer 315:09 &lt; ttk2[m]&gt; :P15:09 &lt; ttk2[m]&gt; there's no arp but there's some series of other layer 3 protocols you 've setup to perform similar functions 15:10 &lt; DarkDrgn2k[m]&gt; its a question of does layer 2 babbel shtuttle packets where they should be (which it does inherently)15:10 &lt; DarkDrgn2k[m]&gt; Or does layer 3 chanage the route of the destianation (which nothing does at the moment)15:10 &lt; benhylau[m]&gt; I am saying this is how roaming works currently, except info contained in ARP now need to be routed through a layer 3 so routers can talk with each other so each AP can be a decision about client IPs15:10 &lt; benhylau[m]&gt; &lt;ttk2[m] \"there's no arp but there's some \"&gt; Exactly my point15:11 &lt; ttk2[m]&gt; I'm just being contrarian, for all intents and purposes babel has no client roaming and you should never do it. 15:12 &lt; benhylau[m]&gt; Yes I am not planning to write layer 3 ARP equivalent so people can walk around while they download a file15:12 &lt; DarkDrgn2k[m]&gt; if successful it may not be any better then not having roaming at the end of the day anyway15:13 &lt; benhylau[m]&gt; &lt;DarkDrgn2k[m] \"if successful it may not be any \"&gt; This too, it will be shitty, we will be routing a lot of traffic across the network needlessly and even the static people will get impacted by this15:14 &lt; DarkDrgn2k[m]&gt; libremesh's solution is probably the best one atm15:14 &lt; DarkDrgn2k[m]&gt; even though i dont know how it really work fully :P15:14 &lt; benhylau[m]&gt; Can I record the previous conversation into some shared pad to persist? I think it's a good summary15:14 &lt; DarkDrgn2k[m]&gt; sure15:15 &lt; DarkDrgn2k[m]&gt; probably could be written more co-herintly into somethign thats actually readable..15:15 &lt; DarkDrgn2k[m]&gt; LOL15:15 &lt; benhylau[m]&gt; Yes but that's a next step, after I ask Nico about the libremesh layer 2+3 thing where they run both batman-adv and bmx15:15 &lt; DarkDrgn2k[m]&gt; i asked him i never got an aswer15:16  * DarkDrgn2k[m] uploaded an image: image.png (42KB) &lt; https://matrix.org/_matrix/media/v1/download/tomesh.net/oWEmnuJoJdVYpLILirEwqJnW &gt;15:16 &lt; DarkDrgn2k[m]&gt; thast basically the answer i got15:16 &lt; benhylau[m]&gt; Okay I think he can at least put me thru to someone who can15:16 &lt; DarkDrgn2k[m]&gt; my quetion (to put is simply) is HOW does it decide what is red what is green15:17 &lt; benhylau[m]&gt; The phones run batman-adv ?!15:17 &lt; DarkDrgn2k[m]&gt; i asked in the libremesh chat room too.. to no avail15:17 &lt; DarkDrgn2k[m]&gt; benhylau:  no but they are brdiged with the node that does15:17 &lt; benhylau[m]&gt; I think roaming across red lines only?15:17 &lt; DarkDrgn2k[m]&gt; correct15:18 &lt; benhylau[m]&gt; So if I want roaming across an entire region basically just do adv haha15:18 &lt; DarkDrgn2k[m]&gt; pritty much15:18 &lt; DarkDrgn2k[m]&gt; right @felix15:18 &lt; DarkDrgn2k[m]&gt; dam hes not in the room :P15:18 &lt; DarkDrgn2k[m]&gt; thast what he did in his german home town for that reason15:19 &lt; benhylau[m]&gt; Yes I think for a small enough network (what I am asking) adv is easiest15:20 &lt; DarkDrgn2k[m]&gt; yes.15:20 &lt; DarkDrgn2k[m]&gt; so bring yggdrasil  into a community and then just run batman-adv to hadn out yggdrasil ip addresses on all the access points15:20 &lt; DarkDrgn2k[m]&gt; 1 yggdrasill node per LAN that exists traffic to yggdrasil15:21 &lt; DarkDrgn2k[m]&gt; or you could do multiple ones for that matter.. donono how the os picks wich one it uses :P15:22 &lt; ttk2[m]&gt; DarkDrgn2k:  https://named-data.net/project/execsummary/15:23 &lt; ttk2[m]&gt; think that's the best current project for the sneaker internet, as it's one protocol where an address can be either a chunk of content (a la ipfs) or a destianton (a la tcp-ip) 16:32 &lt; DarkDrgn2k[m]&gt; i drew pictures....16:32  * DarkDrgn2k[m] uploaded an image: image.png (54KB) &lt; https://matrix.org/_matrix/media/v1/download/tomesh.net/uBoIlQeVEIvHQzotDsdWQHGX &gt;~~16:32  * DarkDrgn2k[m] uploaded an image: image.png (66KB) &lt; https://matrix.org/_matrix/media/v1/download/tomesh.net/YKgaxCioGsLBtPcfhLpdSlLZ &gt;~~~~16:33  * DarkDrgn2k[m] uploaded an image: image.png (68KB) &lt; https://matrix.org/_matrix/media/v1/download/tomesh.net/XYkptAobThmOxbXCqUPjhRQV &gt;~~16:33  * DarkDrgn2k[m] uploaded an image: image.png (59KB) &lt; https://matrix.org/_matrix/media/v1/download/tomesh.net/QgZTXEHXVBGIDVPKTuicEhVI &gt;16:34  * DarkDrgn2k[m] uploaded an image: image.png (64KB) &lt; https://matrix.org/_matrix/media/v1/download/tomesh.net/UwbrAZTunKFZoUyiezAbbJgp &gt;16:37 &lt; DarkDrgn2k[m]&gt; hmm guess i should add that exit node router on the rest of the drawings to make it more symetrical16:43  * DarkDrgn2k[m] uploaded an image: image.png (59KB) &lt; https://matrix.org/_matrix/media/v1/download/tomesh.net/TwzIPedSvDppyVtnDZWkboSx &gt;Resources  Layer 3 WLAN Roaming",
      "url": "/4.1-client-device-roaming.html",
      "href": "/meshnet/4.1-client-device-roaming.html"
    }
    ,
  
    
    "4-2-babel-wireguard-mesh-html": {
      "title": "4.2 Babel + WireGuard Mesh",
      "category": "",
      "content": "4.2 Babel + WireGuard MeshSummary  Should be able to set up Babel + WireGuard on ClearFog Pro running Armbian  Installing Babel          Clone git://github.com/jech/babeld.git and cross-build for ARM      Assign an IPv6 address for each router in fd00::/8        sudo ip addr add &lt;some ipv6 address&gt; dev &lt;eth interface&gt;... repeat for more interfacesbabeld &lt;your arguments and tunings shouldn't need any&gt; eth0 eth1... etc            Babel with IPv4 is full of gotchas        Installing WireGuard          Need to be built as a kernel module which requires Armbian sources      Use for end-to-end encryption between nodes      Expect 400-800 Mbps on ClearFog Pro        Local services (both solutions discusses are non-ideal, need further discussions)          Set up iptables to NAT IPv4 and client devices over the exit so Babel only deals in IPv6      Provide a default IPv6 route that allows accessing mesh devices        Internet gateways          Exits are a list of keys that it would deploy a WireGuard tunnel for      Client nodes need to have keys to exit nodes manually added      Chat logs from matrix/#althea:matrix.orgMar, 2019  ttk2 (@_discord_267031307945508864:t2bot.io)The GL is the best price/performance/availability ratio. You can run an exit in a pi locally but the issue then will be adding it to all the other routers (exits are added out of band as a key exchange mechanism) there’s a curl command trick for that though.  benhylauHi ttk2, can I run Babel + wireguard (node to node or e2e?) without payment daemon?  ttk2 (@ttk2:matrix.org)sure it’s not particularly difficult.do you want an openwrt firmware for that or?you can do it with a script too  benhylauSo I am thinking about Armbian base, it’s the set up I linked above I am trying to prototype  ttk2 (@ttk2:matrix.org)you just need to make sure every router gets a fd ipv6 address, as a note babel with ipv4 is full of gotchas while ipv6 ‘just works’ if you assign any non link local address to the router.benhylau: so you need to run this two line script on startup  sudo ip addr add &lt;some ipv6 address&gt; dev &lt;eth interface&gt;... repeat for more interfacesbabeld &lt;your arguments and tunings shouldn't need any&gt; eth0 eth1... etc  and your donedarn messed up block code formatting  benhylauSo I want to peer the MicroTiks with stock firmware, then on the clearfog run Babel + wireguard, and connect an AP to each. If these work (and we are sure to go ahead with this routing protocol) I may mix some leaf nodes with the GL for lower cost  ttk2 (@ttk2:matrix.org)shouldn’t be an issue, babel has almost no dependencies so an arm binary should work on anything with the same architecture running linuxshould just be able to copy it over and then make an init script.  benhylauSo what do I install in this case? Not the openwrt package  ttk2 (@ttk2:matrix.org)you wouldn’t install anything, you would clone babel then cross build ithere’s a script that takes all the build artifects from openwrt and uses them to easily and quickly let you cross build rusthttps://github.com/althea-mesh/althea_rs/blob/master/scripts/openwrt_build_mips.shjust change the env varaibles to CC and LD instead of target_cc (which is a rust thing) then run gcc to build babelgit clone git://github.com/jech/babeld.gitthen just copy the binary to /bin/ on the other sideI mean as far as engineering a mesh firmware goes this is as simple as it gets :P  benhylauWow thanks, how is jech different from https://github.com/althea-mesh/babeld  ttk2 (@ttk2:matrix.org)we’ve got our price extension, full path rtt extension and are otherwise a few commits behind, we need to rebase every so often.our price extension is currently too messy to merge upstream although we have a neater version of it designed it hans’t been implemented yet.  benhylauAHH ok, and wireguard is in which?  ttk2 (@ttk2:matrix.org)well wireguard might be a little harder, since you’ll need to build it as a kernel module, you’d need the micotik kernel sourceswhich they should release under the gpl… but you never know.  benhylauClearfog pro, that’s what runs the wireguard and routing, tiks will be stock  ttk2 (@ttk2:matrix.org)essentially you would need to find their kernel sources, clone wireguard, setup wireguard to cross build the kernel module, copy it over and then load it. More involved than babel for sure since kernel modules are highly dependent on having the exact source tree of the kernelwell for armbian it won’t be an issue, their kernel sources are publichttps://forum.openwrt.org/t/mikrotik-gpl-source/6750  benhylauYea it should run Armbian…Do you guys run wireguard for node to node or e2e?  ttk2 (@ttk2:matrix.org)depending on the kernel version of your device versus the last time they updated their gpl sources you may be SOL on the micotikboth, we nest wireguard(yes it be like that)we could probable remove node to node and assume links are isolated and secured, but you know unmanaged switches exist.and so do sector antennas without client isolation enabled  benhylauI don’t expect to flash the tiks anyway, I think wireless equipment it’s better to leave them as is, mess with the router board all we want :)  ttk2 (@ttk2:matrix.org)so we chose the 15-20% perf hit for security by defaultand so do sector antennas without client isolation enabled  benhylauHmm how does node to node help with this?Because same node, it won’t encrypt at all?  ttk2 (@ttk2:matrix.org)benhylau: so sector antennas act like unmanaged switches, meaning all nodes have the same broadcast domain, so nodes A, B, and C are on the same ‘wire’ and B could send packets with ‘A’ in the from field and get C billed for them.wireguard does authentication and encrypiton, we don’t need the latter really but it’s faster than any auth only altnerative at the moment so 🤷  benhylauHeh wow, what speeds can you get from one of those little GL processors?  ttk2 (@ttk2:matrix.org)not much of an issue with you guys, you can do the (much easier) end to end wireguard only100mbit without anything else getting in the way.it’s actually mostly iptables overhead not the actual wireguard encryption, they have a hand tuned assembly arm encryption implementation, it uses the vector extension to great effect.  benhylauThe clearfog has a 1.6G ARM, do you think it can saturate a 800 Mbps radio?  ttk2 (@ttk2:matrix.org)I’ve tested similar processors, it’s highly dependent on the memory, but I’ve seen 400-600ish let me know what you seeso not quite, but pretty close.well 400-600 with two tunnels… yeha you can probably push to 800  benhylauOkay I am gonna give them a call today, see if I can order a 2 GB RAM version with poeAnd exit node is just a node with some extra configs and plugged into internet, then other nodes put its key?  ttk2 (@ttk2:matrix.org)so our first gen exit nodes just has a list of keys that it would deploy a wireguard tunnel for (manual client config) but now our billing binary does dyanmic setup and registrationbut yes an exit node is really just a glorified wireguard configurating scriptyou just script the steps to configure on each end, it’s pretty easy  benhylauThe last thing is local devices, if I plug raspberry pis into the network, they need to be natted?  ttk2 (@ttk2:matrix.org)well that depends on what you want, what we do is setup iptables to nat ipv4 and client devices over the exit.this has the upside of making sure babel only deals in ipv6  benhylauThis means the traffic will always go thru the exit and back?  ttk2 (@ttk2:matrix.org)it’s just a couple of iptables lines I can shareyes, it makes the default ipv4 route (and thus the default route for client traffic) over the tunnel which will route all traffic that way.you could provide a default ipv6 rotue that allows accessing mesh devices but not the internet or some variant, but we haven’t really explored that wellso I can’t share magic iptables lines to make it happen.yes, it makes the default ipv4 route (and thus the default route for client traffic) over the tunnel which will route all traffic that way.  benhylauShare this to me :) I want the other but perhaps this to startBut then I am also mindful apps don’t like IPv6 still, so… They kinda need the v4 nat  ttk2 (@_discord_267031307945508864:t2bot.io)https://github.com/althea-mesh/althea_rs/blob/master/althea_kernel_interface/src/exit_client_tunnel.rs#L159https://github.com/althea-mesh/althea_rs/blob/master/althea_kernel_interface/src/exit_server_tunnel.rs#L117  benhylauThanks so much for explaining all this  ttk2 (@ttk2:matrix.org)No problem!Resources  Althea documentation  Althea exit server automation",
      "url": "/4.2-babel-wireguard-mesh.html",
      "href": "/meshnet/4.2-babel-wireguard-mesh.html"
    }
    ,
  
    
    "4-3-site-survey-html": {
      "title": "4.3 Site Survey",
      "category": "",
      "content": "4.3 Site SurveyThis is a summary of notes from my visit to The Farm that is relevant to the planning of the local mesh network, and some follow-up discussions with various people that happened over April.Upon arriving to The Farm on March 31, the first thing I realized was how huge the area is, and that the Camp will stay mostly near the areas around the buildings. We may have to connect to one point further away from the buildings to get Internet access (more on that later), but we should prioritize getting the main indoor and outdoor spaces reliable local network access for devices of 500 people, and not worry too much about connectivity in areas far from the buildings.Existing Network &amp; Internet AccessLet’s start with what connectivity currently exists at The Farm based on a rough map of the zones we defined for the Camp.The Hacking Zone is the most well connected space, where staff offices and indoor facilities like the Tea Lounge currently exist. Inside these buildings, one can connect to the Indoor AP SSID made available with Ubiquiti APs wired to a switch in one of the offices. Beyond this cluster of buildings, one can connect to the Outdoor AP which is wirelessly connected in a mesh topology using the omnidirectional Ubiquiti UniFi Mesh devices. The Internet access speeds are similar but outdoor coverage is more spotty, and having 500 people would likely overwhelm the sparsely distributed outdoor devices and the existing Internet backhaul.The existing Internet access is beamed across the ocean from Monterey more than 50 km away. It can theoretically reach up to 40 Mbps, but in the two days I was there it measured something like 5 Mbps download and 12 Mbps upload, and was down one of the mornings. Phone connectivity to cellular service is extremely poor, most people have zero service while some people have spotty coverage.On-going Work for Internet AccessWhile we have been planning for a 500+ Mbps local network with no Internet access at all, there is a parallel effort led by Jonah to source Internet access to the Camp. We have discussed ideas like having different types of connectivities, and segmenting them into different SSIDs so Camp participants can experiment with them.            Connection type      Speed (Mbps)      Status                  Fiber (dark or new)      1000      Not feasible due to cost and lead time              Wired from large ISP      100 - 1000      Require build-out and contract, not feasible due to cost and lead time              Local wireless ISPs      20 - 100      Currently evaluating locations for new relay tower (this is where we may have a solar-powered node acting as relay to main meshnet cluster)              Existing long-distance link      40      Investigating whether provider can improve bandwidth and reliability              Satellite      30      Potentially as emergency link but cost structure (max bytes) infeasible for general use              Cellular      ?      Potentially emergency or general use, using range extenders with a 4G provider that has service in the area      None of these options is confirmed at the time of writing due to service availability and cost considerations. If some of these play out, they will likely be late additions that we’d confirm closer to July and it is entirely possible that none of these options will be available!Local Network PrototypingThese MicroTik devices came in the week I was at the Internet Archive so I was able to pick up these for prototyping, along with a pair of ESPRESSObin and a PoE switch I borrowed from Yurko at Toronto Mesh.I also reached out to LibreRouter and SolidRun, but they don’t fit very well with our event timelines. I am hoping to run Babel on the ESPRESSObin single-board computers that would connect to the MicroTik radio equipment.Local Network Installation PlanThe plan for putting together this network looks something like this.            Date      Milestone                  Jun 8      Communication infrastructure test at The Farm              Jun ?      Meetup @ Internet Archive with a few nodes for application developers to do a test run              Jul 1      Power infrastructure in place              Jul 8      Meshnet core nodes and Internet connectivity in place              Jul 15-17      Volunteer build-out of structures and meshnet              Jul 21-22      Volunteer camp take-down              Jul 18-21      DWeb Camp      In the following photo, you can see telephone poles that we can access with a lift. The plan is that we will book a lift around the July 8 date and install the first few nodes of the local network with a small group of volunteers that have experience setting up networks.Then between July 15-17, we can involve more volunteers to connect areas such as this camp ground to the right of the large buildings in this photo.In indoor spaces at the Hacking Zone, we can use the existing access points that serve the Indoor AP for wireless client connectivity, and add ethernet drops wired to the network switch at the mesh node at the building, where we expect groups gather and hack on projects. Raspberry Pis can be wired in from there to provide main services throughout the Camp, such as local Internet Archive content and a Matrix homeserver.There are also interesting outdoor spaces like this ladder, where we can hang WiFi radios that are easy to access, and perhaps put a switch underneath for people to plug devices into, and see them federate with those devices plugged in at the indoor space.Power AvailabilityIn our large outdoor areas, we’ll need to consider power for anything to work at all. While I was at The Farm, I saw power cables runs throughout main areas.Joshua assured me that wired power would not be a problem in the spaces we plan to use for the Camp. Additionally, there are ongoing solar power projects at The Farm, and for the power needs of WiFi equipment, their solar-charged batteries can easily power mesh nodes with multiple radios if necessary. So even when it is unfeasible to run cables (e.g. the more remote relay tower for Internet backhaul), we can have a standalone solar-powered node.Mesh Network SoftwareThere were various discussions relating to what mesh software to run. The simplest is to run a big switch network, which is like a typical home network, just with more devices plugged in. This is simplest, and we shouldn’t run into scalability issues at our size. In large switch networks, broadcast traffic becomes significant, eating up precious wireless bandwidth and it is easy for individual clients to ruin it for everyone (e.g. having multiple DHCP servers). On the other hand, peer-to-peer applications that support local network peering (e.g. via broadcasts) will work beautifully. For example, you will see all Secure Scuttlebutt (SSB) clients on the local network without the need for Pubs. Although some community networks are indeed run as switch networks, this kind of feels like cheating in terms of testing our peer-to-peer applications, because this is generally not the type of networks we find in the real world. Most real world networks are networks of switch networks, having Layer 3 boundaries that broadcast messages do not pass through naturally, thus requiring bootstrap servers with public addresses a lot of times. So we intend to run a similar type of network using Babel, a Layer 3 mesh protocol, which present some of the challenges of real world networks (e.g. the Internet).ExtrasIn discussions with Jonah, we came up with some cool ideas, some of which Jonah had positive experience from his previous events:A pair of Wireless Wire: This is a pair of wireless radios preconfigured to talk to each other. It forms a point-to-point network without need for configuration.AP box (without client isolation): This is simply a home Access Point that allow clients to broadcast messages, so peer-to-peer apps can easily discover other devices that joined the same SSID. Client devices (e.g. laptops and phones) can join wirelessly or plug into ethernet ports, and the device is battery powered, so we can take it anywhere to become a hub for a little local network.These are not very different from the nodes in the larger mesh network, but they are fun devices for groups to sign them out and use them in their project, or just tinker with them in an isolated environment.",
      "url": "/4.3-site-survey.html",
      "href": "/meshnet/4.3-site-survey.html"
    }
    ,
  
    
    "4-4-planning-questions-html": {
      "title": "4.4 Planning Questions",
      "category": "",
      "content": "4.4 Planning QuestionsThis is the place to collect questions and comments that have come up in the planning stages.If you want to learn more or contribute to the project, this is probably a good read after looking at the README.Feel free to add new questions or send comments to this page as pull requests.  What is your WAN connection(s)?      Will there be a routed public IP block?    Or a single/few static IPs?    Will one node be the designated WAN egress/ingress point or will there be multiple gateways on the meshnet?  @jonah-archive is working with the venue and local ISPs to pool together some internets. I am imagining the network to primarily operate without a WAN connection, but expect one or more more nodes as gateway depending on how the connectivity is sourced. If there is a line that pops out somewhere vs. two providers where one is satellite, we could have multiple gateways.I don’t expect static IPs would be needed as I don’t expect to be hosting services to the outside world. Of course, if people run some distributed service with Internet peers, that is still possible.  Since the location is coastal (e.g. wind, moisture, dense fog, animals, etc.), what are the allowances for HA - high availability - radios, routers/switches      You can use simple STP for fail-over between radios    900Mhz can be a useful–if quite slow–backup    Be wary of using any 60Ghz PtP option as fog can really hinder link performance  We need the core areas to have redundancy against at least one radio failure, and have ways to monitor the overall link status of the network. Gateway selection and availability should be automatically announced/advertised with our routing protocol.We should get some disaster.radio distributed at key locations, perhaps as a separate network where people can connect to a camp-global chat.Currently not using any 60 GHz equipment, but even if we do they’d be used (~ 250 m) at much smaller distances than specifications (1-2 km).  Is there power at each desired “node” location?      If not, what is planned?    POE beyond 100-150 feet is unreliable  Not all locations have power. I believe the area with buildings and around the lake has power sources. At the end of March we will visit the site to identify power requirements. We also expect power build-out to complete before meshnet build-out.  Services      Are any mesh services expecting to be reachable from the public internet?    Waterproof/moisture-proof cases for Pi-like devices is crucial  I don’t expect services to be reachable automagically (as in our infrastructure will assign public IPs), but I fully expect people will manually peer stuff to their Internet peers and burn up our precious egress :cry:  LAN topology      Will the network be “flat”, or will there be vlan-segmented networks?    Will these vlans need firewall policies between them?    Will there be QoS in place for WAN egress traffic like VOIP/video-calling?  Inclined to start very simple, and add things as needed. In April there will be a call to describe the basic network and how communities can deploy services on there (thinking to run stuff on Raspberry Pis or boxes they bring in). If there are specific requirements we can discuss whether to modify the network topology to make things happen.  Is the group planning on collecting data and visualizing these metrics?      SNMP based monitoring platforms - LibreNMS, PRTG    Input data into InfluxDB for data retrieval    Dashboards like Grafana, Kabana, etc.  We are imagining pushing metrics to InfluxDB, where SNMP monitoring tools can populate at a preconfigured endpoint. SNMP is going to be readily available by most vendors of systems/networking equipment. For those devices/metrics that aren’t SNMP-ready, we can use a series of distributed scripts populating it.I think this is an important piece we need to plan, not only as network operators but to also map it to physical topologies so participants of the Camp can discuss and map the digital world to a self-contained network we can visually see its infrastructures.  If this is really a decentralized camp why would it have a centralized network with a bunch of authoritative services?The meshnet is a network that we can spend some time to plan ahead of time, and can test at the venue, to make sure there is power at the nodes, etc. People are also free to bring their own network gear and set up say… a LoRa network or a parallel WiFi network.The building will be collaborative, with human processes drawn from community networks rather than “here’s your IP and no you cannot connect your own radios to it”. We will discuss the protocols on GitHub and if someone brings a radio and antenna they should be able to hook into the network too. The hardware build is very much part of the camp! If someone brings a solar node I’d be thrilled :)More questions were discussed on GitHub Issues as we got closer to the event date.",
      "url": "/4.4-planning-questions.html",
      "href": "/meshnet/4.4-planning-questions.html"
    }
    ,
  
    
      
    
    "5-0-additional-resources-html": {
      "title": "5.0 Additional Resources",
      "category": "",
      "content": "5.0 Additional ResourcesThis section contains important project resources that don’t fit into the above sections.5.1 Application Testnet contains software that allows application developers to use two Raspberry Pis to emulate the mesh network environment. This was useful for developers to test their applications prior to arriving to the experimental network.5.2 Hardware Inventory contains a list of hardware used and budget information. The only items that are not tracked on this list that made up part of the network are Internet backhaul equipment provided by the venue and Internet Service Provider, and standard network switches brought to Camp by participants.5.3 Graphic Assets contains high-res digital art created by various designers at Camp for the purpose of the mesh network project.5.4 Photo Gallery contains photos taken by various Camp participants that are related to setting up of the mesh network. Some of the photos are captioned and available on ImageSnippets. You can find many more general photos about the event at Internet Archive’s DWeb Camp 2019 Collection.",
      "url": "/5.0-additional-resources.html",
      "href": "/meshnet/5.0-additional-resources.html"
    }
    ,
  
    
    "5-1-application-testnet-html": {
      "title": "5.1 Application Testnet",
      "category": "",
      "content": "5.1 Application TestnetThis uses two Raspberry Pi 3B or 3B+ to emulate the network environment from the perspective of a device plugged into the local mesh network.After running the installation script and when you power the Raspberry Pi back on, it will use its wireless interface to mesh with another similarly configured Raspberry Pi, and any device plugged into the ethernet port will receive an IP address in the 10.[random].0.0/16 subnet. Your device will behave as if it is plugged into the DWeb Camp network, assigned an IP address unique within the local network and reachable by any device connected to the network because Babel is redistributing routes to all devices. It is probably a good idea to unplug the Raspberry Pi from your home router before powering on to avoid having two DHCP servers on your home network.InstallationYou will need two Raspberry Pi 3B or 3B+ with SD cards, and probably ethernet cables to connect devices (e.g. laptops) to the Raspberry Pi local network.      Flash the SD card with Raspbian Buster Lite.        Create an empty file named ssh to enable SSH when the Pi boots:     $ touch /path/to/sd/boot/ssh        Plug the SD card into the Pi.        Plug the Pi into your router so it has connectivity to the Internet. SSH into the Pi with ssh pi@raspberrypi.local and password raspberry.    Optional: There are other ways to connect, such as connecting the Pi to your computer and sharing Internet to it. If you have multiple Pi’s connected to your router, find their IPs with nmap -sn 192.168.X.0/24 (where 192.168.X is your subnet) and SSH to the local IP assigned to the Pi you want to address ssh pi@192.168.X.Y.        Run the following, then let the installation complete. After installtion the Pi will power off:     $ wget https://raw.githubusercontent.com/dweb-camp-2019/meshnet/master/testnet/install &amp;&amp; chmod +x install &amp;&amp; ./install  Network TopologyThis network has two Raspberry Pis (B and C) connected together running as Babel routers.Laptops (A and B) or any other client with an ethernet port can connect through the Raspberry Pi ethernet port eth0 and be assigned an IP address.The two Raspberry Pi themselves use the on-board WiFi in ad-hoc mode to wirelessles connect with each other.    +------------------+        +-------------------------------+         +-------------------------------+        +------------------+    | A: Laptop client |        | B: Raspberry Pi babel router  |         | C: Raspberry Pi babel router  |        | D: Laptop client |    | 10.131.225.234   +--------+ eth0:  10.131.0.1 assigns /16 + - - - - + eth0:  10.201.0.1 assigns /16 +--------+ 10.201.30.107    |    | assigned by B    |  eth0  | wlan0: 192.168.133.131 in /24 |  wlan0  | wlan0: 192.168.133.201 in /24 |  eth0  | assigned by C    |    +------------------+        +-------------------------------+         +-------------------------------+        +------------------+The Babel routers are configured to announce their client subnets, so all devices are visible to one another and the IP addresses can be treated as public IP addresses.In this example:  A: 10.131.225.234  B: 10.131.0.1  C: 10.201.0.1  D: 10.201.30.107This means even though clients A and D themselves do not run Babel, all the devices can ping each other on these IP addresses.If you are running an application on a computer, server, single-board computer, phone, or any other device, this is the IP address that other people on the local mesh network can reach you at.In this Raspberry Pi model of the network, you can see that A and D can send and receive from one another through the chain at about 33 Mbps, limited by the wireless wlan0 link:$ iperf3 -c 10.201.30.107                                                                                                                                                                                                                                                                                                                             ⏎Connecting to host 10.201.30.107, port 5201[  5] local 10.131.225.234 port 57472 connected to 10.201.30.107 port 5201[ ID] Interval           Transfer     Bitrate[  5]   0.00-1.00   sec  4.98 MBytes  41.8 Mbits/sec[  5]   1.00-2.00   sec  3.93 MBytes  33.0 Mbits/sec[  5]   2.00-3.00   sec  3.60 MBytes  30.2 Mbits/sec[  5]   3.00-4.00   sec  3.84 MBytes  32.2 Mbits/sec[  5]   4.00-5.00   sec  3.93 MBytes  33.0 Mbits/sec[  5]   5.00-6.00   sec  3.96 MBytes  33.2 Mbits/sec[  5]   6.00-7.00   sec  3.84 MBytes  32.2 Mbits/sec[  5]   7.00-8.00   sec  3.91 MBytes  32.8 Mbits/sec[  5]   8.00-9.00   sec  4.07 MBytes  34.2 Mbits/sec[  5]   9.00-10.00  sec  4.05 MBytes  34.0 Mbits/sec- - - - - - - - - - - - - - - - - - - - - - - - -[ ID] Interval           Transfer     Bitrate[  5]   0.00-10.00  sec  40.1 MBytes  33.7 Mbits/sec                  sender[  5]   0.00-10.00  sec  40.1 MBytes  33.7 Mbits/sec                  receiveriperf Done.$ iperf3 -c 10.201.30.107 -RConnecting to host 10.201.30.107, port 5201Reverse mode, remote host 10.201.30.107 is sending[  5] local 10.131.225.234 port 57475 connected to 10.201.30.107 port 5201[ ID] Interval           Transfer     Bitrate[  5]   0.00-1.00   sec  3.79 MBytes  31.8 Mbits/sec[  5]   1.00-2.00   sec  3.95 MBytes  33.1 Mbits/sec[  5]   2.00-3.00   sec  3.34 MBytes  28.0 Mbits/sec[  5]   3.00-4.00   sec  3.88 MBytes  32.5 Mbits/sec[  5]   4.00-5.00   sec  3.89 MBytes  32.6 Mbits/sec[  5]   5.00-6.00   sec  3.89 MBytes  32.6 Mbits/sec[  5]   6.00-7.00   sec  3.98 MBytes  33.4 Mbits/sec[  5]   7.00-8.00   sec  4.00 MBytes  33.5 Mbits/sec[  5]   8.00-9.00   sec  3.98 MBytes  33.4 Mbits/sec[  5]   9.00-10.00  sec  3.89 MBytes  32.6 Mbits/sec- - - - - - - - - - - - - - - - - - - - - - - - -[ ID] Interval           Transfer     Bitrate         Retr[  5]   0.00-10.00  sec  39.9 MBytes  33.4 Mbits/sec    0             sender[  5]   0.00-10.00  sec  39.6 MBytes  33.2 Mbits/sec                  receiveriperf Done.The actual network at DWeb Camp will have much more bandwidth, and at much larger distances with more hops, but this model should emulate the environment for you to test applications running on clients A and D.",
      "url": "/5.1-application-testnet.html",
      "href": "/meshnet/5.1-application-testnet.html"
    }
    ,
  
    
    "5-2-hardware-inventory-html": {
      "title": "5.2 Hardware Inventory",
      "category": "",
      "content": "5.2 Hardware InventoryWe are expecting to set up 6-8 Mesh Nodes depending on the area of coverage, which we will not know until early-July when registration level will tell us how far out the camp sites will spread.A Mesh Node consists of:  A router  One, or more, point-to-point (PTP) radios to reach other Mesh Nodes  One, or more, access point (AP) that is an omnidirectional (indoor or outdoor) or sector antenna for client devices (e.g. phone or computers) to connect toAll routers are ESPRESSObin devices running Babel and Mesh Nodes with more than one PTP radio will also need a managed switch to VLAN tag the traffic.Three or more of the Mesh Nodes will also have a PoE switch where wired access to the network will be possible. Projects are expected to connect devices running local services (e.g. Matrix) to these switch ports.The following is a listing of our equipment inventory.Inventory            Item      Vendor      Price (USD)      Total Quantity (# of them borrowed)                  MikroTik Wireless Wire (pair)      Streakwave      170.00      5              MikroTik SXTsq 5 ac      Streakwave      53.00      8              MikroTik mANTBox 15s      Streakwave      117.00      4              MikroTik OmniTIK 5 PoE ac      Streakwave      109.00      4              MikroTik wAP ac 3x3 (black)      Streakwave      73.00      3              MikroTik cAP ac      Streakwave      56.50      1              MikroTik QMP mount      Streakwave      6.00      2              Ubiquiti UBAM mount      Streakwave      8.00      2              Cat5e connectors (100 pcs)      Streakwave      29.96      1              ESPRESSObin V5 64 Bit      Amazon      49.00      10 (2)              ESPRESSObin V7 64 Bit      Amazon      79.00      2 (1)              ESPRESSOBIN+ power supply      Amazon      10.00      10 (2)              NETGEAR 5-Port Gigabit Managed Switch      Amazon      36.99      5              Outdoor Junction Box      Amazon      29.99      6              UCTRONICS PoE Splitter (Gigabit 802.3af Micro-USB 5V)      Amazon      15.00      15              PoE Splitter (10/100 802.3af Micro-USB 5V)      n/a      n/a      2 (2)              PoE Splitter (10/100 802.3af Barrel 12V)      n/a      n/a      2 (2)              UniFi Switch 16 (10/100/1000 16-port PoE switch)      n/a      n/a      1 (1)              SRW224P (10/100 24-port PoE switch)      n/a      n/a      1 (1)              SRW208P (10/100 8-port PoE switch)      n/a      n/a      2 (2)              GS608 (10/100/1000 8-port switch)      n/a      n/a      1 (1)              GS108T (10/100/1000 8-port switch)      n/a      n/a      2 (2)              GS108 (10/100/1000 8-port switch)      n/a      n/a      2 (2)              EN104TP (10M 4-port switch)      n/a      n/a      1 (1)              ER-X-SFP EdgeRouterX SFP      n/a      n/a      1 (1)              Raspberry Pi 3B+      n/a      n/a      4 (4)              Ethernet cable spool (1000 ft)      n/a      n/a      2 (2)              Ethernet cable crimper      n/a      n/a      3 (3)              Ethernet cable tester      n/a      n/a      1 (1)              SD card      n/a      n/a      12 (12)              1 TB SSD with USB enclosure      n/a      n/a      2 (2)              Cooling fans (for outdoor nodes)      n/a      n/a      6 (6)      Budget            Category      Original Budget (USD)      Revised Budget (USD)                  Meshnet equipment (prototype)      1500      500              Meshnet equipment (production)      5000      3000              Misc. hardware (SBCs, cables)      1500      500              Installation expenses      500      500              Total      8500      4500      Orders            Order      Total      Status                  Streakwave #1      334.00      Shipped              Amazon #1      336.16      Shipped              Streakwave #2      1456.32      Shipped              Amazon #2      837.00      Shipped              Streakwave #3      901.09      Shipped              Installation expenses      540.00      Completed              Total      4413.48             ",
      "url": "/5.2-hardware-inventory.html",
      "href": "/meshnet/5.2-hardware-inventory.html"
    }
    ,
  
    
    "5-3-graphic-assets-html": {
      "title": "5.3 Graphic Assets",
      "category": "",
      "content": "5.3 Graphic AssetsNetwork Physical MapDownload PDFNetwork Info PosterDownload PDFNetwork Steward PostcardDownload PDFNetwork Steward ButtonDownload PDF",
      "url": "/5.3-graphic-assets.html",
      "href": "/meshnet/5.3-graphic-assets.html"
    }
    ,
  
    
      
    
      
    
      
    
    "": {
      "title": "1.0 Project Overview",
      "category": "",
      "content": "# Meshnet 📡 DWeb Camp 2019This website documents the design, build, and stewardship of the participatory network at [DWeb Camp 2019](http://dwebcamp.org).![internet](images/internet.jpg)## 1.0 Project Overview### Design GoalsThe idea of a participatory meshnet project came about when the organizers of DWeb Camp started imagining the summer event for 2019. shortly after, we put this up on a GitHub README:>The 2019 Decentralized Web ~~Summit~~ Camp will take place at a beautiful piece of coastal land an hour west of San Jose from July 18 to 21.This area currently has very minimal network infrastructure and Internet connectivity.Let's use this opportunity to build, test, and use our decentralized systems together,in a connectivity environment that more closely resembles large parts of the world,and co-imagine the social processes and local technologies that will help us organize day-to-day,and make inclusive spaces to learn from each other and build capacity around human-empowering technologies.We decided to build an experimental network for an experimental event at a new venue that is itself undergoing its own experiment, but we also knew our 500 expected participants is exactly the right crowd to experiment with together, so we drafted the following design goals:- Reliable local network with 802.11ac speeds- Access points in key areas for client devices (e.g. phones and laptops) to connect- Allow Camp participants to extend or run locally-hosted services on the network- Carry traffic to Internet gateway for client devices to access the Internet with limited bandwidth and reliability- Document setup and learnings for future events or other groupsThen the meshnet project for DWeb Camp 2019 became official, and Benedict Lau, as Network Coordinator, started designing this network on [dweb-camp-2019/meshnet](https://github.com/dweb-camp-2019/meshnet/), while Jonah Edwards, as Connectivity Coordinator, started sourcing an Internet backhaul to the event venue. At the same time, we invited anyone who was interested in contributing to the planning to join us at [#dweb-camp-2019-mesh:matrix.org](https://riot.im/app/#/room/#dweb-camp-2019-mesh:matrix.org).### Participatory NetworkThe idea of a participatory network may seem foreign, but not for those who have participated in a Community Network (CN). Essentially what we were hoping to accomplish is to borrow from established CNs not only their software and hardware experiences, but also the social processes of co-creating and co-maintaining network infrastructure, and create our temporary CN with the participants of DWeb Camp 2019.![network-poster](images/network-poster.jpg)### Documentation OutlineThe technical design of the mesh network is documented in [Section 2](2.0-network-design.html), and [Section 3](3.0-social-experience.html) summarizes the social aspect of this project and the learnings that came out of running this participatory network together. [Section 4](4.0-planning-notes.html) contains early planning notes and [Section 5](5.0-additional-resources.html) has additional resources and a [Photo Gallery](gallery/2019/) of the network design and build.![mesh-welcome](images/mesh-welcome.jpg)We hope this documentation will serve as a reference and inspire future instances of participatory networks at events and communities.If you have feedback or would like to learn more about this project, please email [hello [at] hypha.coop](mailto:hello@hypha.coop) to get in touch!### LicensesThe source code in the [GitHub repository](https://github.com/dweb-camp-2019/meshnet/) is licensed under [GNU General Public License version 3 (GPL-3.0)](https://github.com/dweb-camp-2019/meshnet/tree/master/licenses/LICENSE-GPL-3.0).Content on this website is licensed under [Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)](https://github.com/dweb-camp-2019/meshnet/tree/master/licenses/LICENSE-CC-BY-SA-4.0), with the exception of the [5.4 Photo Gallery](gallery/2019/) that features photos from multiple photographers.The website is generated using [Jekyll](https://jekyllrb.com) and [ImageMagick](https://imagemagick.org), and contains modified versions of source code from the Jekyll theme [alexander-heimbuch/millidocs](https://github.com/alexander-heimbuch/millidocs) licensed under [The MIT License (MIT)](https://github.com/dweb-camp-2019/meshnet/tree/master/licenses/LICENSE-MIT) and [ggreer/jekyll-gallery-generator](https://github.com/ggreer/jekyll-gallery-generator) licensed under [Apache 2.0](https://github.com/dweb-camp-2019/meshnet/tree/master/licenses/LICENSE-Apache-2.0).",
      "url": "/",
      "href": "/meshnet/"
    }
    ,
  
    
    "gallery-2019": {
      "title": "5.4 Photo Gallery: 2019",
      "category": "",
      "content": "5.4 Photo Gallery
      "url": "/gallery/2019/",
      "href": "/meshnet/gallery/2019/"
    }
    ,
  
    
    "gallery": {
      "title": "5.4 Photo Gallery",
      "category": "",
      "content": "5.4 Photo Gallery                    2019    71 images",
      "url": "/gallery/",
      "href": "/meshnet/gallery/"
    }
    
  
};
